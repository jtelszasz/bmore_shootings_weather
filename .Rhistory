arrange(shooting.month) %>%
rename(n.homicides.mnth = forecast.mean)
monthly.homicides.forecast.merge <- monthly.decomp.forecast.df %>%
bind_rows(monthly.homicides %>%
mutate(source = "actual",
n.homicides.mnth = as.double(n.homicides.mnth))) %>%
arrange(shooting.month)
monthly.decomp.forecast.df <- monthly.decomp.forecast.df %>%
mutate(source = "forecast") %>%
#bind_rows(data.frame(forecast.mean = 26,
#                     shooting.month = as.Date("2018-01-01"),
#                     source = "actual")) %>%
arrange(shooting.month) %>%
rename(n.homicides.mnth = forecast.mean)
monthly.decomp.forecast.df <- data.frame(
forecast.mean = monthly.decomp.forecast$mean,
shooting.month = seq(as.Date("2018-02-01"),
by = "month",
length.out = monthly.decomp.forecast$mean %>%
length()))
monthly.decomp.forecast.df <- monthly.decomp.forecast.df %>%
mutate(source = "forecast") %>%
#bind_rows(data.frame(forecast.mean = 26,
#                     shooting.month = as.Date("2018-01-01"),
#                     source = "actual")) %>%
arrange(shooting.month) %>%
rename(n.homicides.mnth = forecast.mean)
monthly.homicides.forecast.merge <- monthly.decomp.forecast.df %>%
bind_rows(monthly.homicides %>%
mutate(source = "actual",
n.homicides.mnth = as.double(n.homicides.mnth))) %>%
arrange(shooting.month)
monthly.forecast.plot <- monthly.homicides.forecast.merge %>%
filter(year(shooting.month) %in% c(2017, 2018)) %>%
ggplot(aes(month(shooting.month), n.homicides.mnth)) +
geom_line(aes(color = factor(year(shooting.month)))) +
geom_point(aes(color = factor(year(shooting.month)),
shape = source),
size = 3) +
scale_shape_manual(values = c(19, 1)) +
theme_minimal() +
ylab("Monthly Homicides") +
xlab("Month") +
scale_x_continuous(breaks = seq(1,12,1)) +
ggtitle("Actual and Forecasted Monthly Homicides")
ggplotly(monthly.forecast.plot)
monthly.forecast.plot <- monthly.homicides.forecast.merge %>%
filter(year(shooting.month) %in% c(2017, 2018)) %>%
ggplot(aes(month(shooting.month), n.homicides.mnth)) +
geom_line(aes(color = factor(year(shooting.month)))) +
geom_point(aes(color = factor(year(shooting.month)),
shape = source),
size = 3) +
scale_shape_manual(values = c(19, 1)) +
theme_minimal() +
ylab("Monthly Homicides") +
xlab("Month") +
scale_x_continuous(breaks = seq(1,12,1)) +
ggtitle("Actual and Forecasted Monthly Homicides")
ggplotly(monthly.forecast.plot)
monthly.forecast.plot <- monthly.homicides.forecast.merge %>%
filter(year(shooting.month) %in% c(2017, 2018)) %>%
ggplot(aes(month(shooting.month), n.homicides.mnth)) +
geom_line(aes(color = factor(year(shooting.month)))) +
geom_point(aes(color = factor(year(shooting.month)),
shape = source),
size = 3) +
scale_shape_manual(values = c(19, 1)) +
theme_minimal() +
ylab("Monthly Homicides") +
xlab("Month") +
scale_x_continuous(breaks = seq(1,12,1)) +
ggtitle("Actual and Forecasted Monthly Homicides")
monthly.forecast.plot
year.end.2018.homicides <- monthly.decomp.forecast.df %>%
filter(year(shooting.month) == "2018") %>%
summarise(sum.mean = sum(forecast.mean)) %>%
pull() +
monthly.homicides %>%
filter(year(shooting.month) == "2018") %>%
select(n.homicides.mnth) %>%
pull()
year.end.2018.homicides <- monthly.decomp.forecast.df %>%
filter(year(shooting.month) == "2018") %>%
summarise(sum.mean = sum(n.homicides.mnth)) %>%
pull() +
monthly.homicides %>%
filter(year(shooting.month) == "2018") %>%
select(n.homicides.mnth) %>%
pull()
year.end.2018.homicides <- monthly.decomp.forecast.df %>%
filter(year(shooting.month) == "2018") %>%
summarise(sum.mean = sum(n.homicides.mnth)) %>%
pull() +
monthly.homicides %>%
filter(year(shooting.month) == "2018") %>%
select(n.homicides.mnth) %>%
pull()
shootings.homicides %>%
mutate(wkend = ifelse(wday(crime.datetime) %in% c(0,6), "Weekend", "Weekday")) %>%
filter(year(crime.datetime) %in% c(2016, 2017),
description == "HOMICIDE") %>%
group_by(wkend, hr) %>%
summarise(n.hour = n()) %>%
mutate(pct.hour = n.hour / sum(n.hour)) %>%
ungroup() %>%
ggplot(aes(x = hr, y = pct.hour)) +
geom_line(aes(color = wkend)) +
theme_minimal()
shootings.homicides %>%
mutate(wkend = ifelse(wday(crime.datetime) %in% c(0,6), "Weekend", "Weekday")) %>%
filter(year(crime.datetime) %in% c(2016, 2017),
description == "HOMICIDE") %>%
group_by(wkend, hr) %>%
summarise(n.hour = n()) %>%
mutate(pct.hour = n.hour / sum(n.hour)) %>%
ungroup() %>%
ggplot(aes(x = hr, y = pct.hour)) +
geom_line(aes(color = wkend)) +
theme_minimal() +
ggtitle("Weekday and Weekend Homicide Hourly Profile, 2016-2017") +
xlab("Hour of Day") +
ylab("Percent of Daily Homicides")
shootings.homicides %>%
mutate(wkend = ifelse(wday(crime.datetime) %in% c(0,6), "Weekend", "Weekday")) %>%
filter(year(crime.datetime) %in% c(2016, 2017),
description == "HOMICIDE") %>%
group_by(wkend, hr) %>%
summarise(n.hour = n()) %>%
mutate(pct.hour = n.hour / sum(n.hour)) %>%
ungroup() %>%
ggplot(aes(x = hr, y = pct.hour)) +
geom_line(aes(color = wkend)) +
theme_minimal() +
scale_y_continuous(labels = scales::percent())
shootings.homicides %>%
mutate(wkend = ifelse(wday(crime.datetime) %in% c(0,6), "Weekend", "Weekday")) %>%
filter(year(crime.datetime) %in% c(2016, 2017),
description == "HOMICIDE") %>%
group_by(wkend, hr) %>%
summarise(n.hour = n()) %>%
mutate(pct.hour = n.hour / sum(n.hour)) %>%
ungroup() %>%
ggplot(aes(x = hr, y = pct.hour)) +
geom_line(aes(color = wkend)) +
theme_minimal() +
scale_y_continuous(labels = scales::percent()) +
ggtitle("Weekday and Weekend Homicide Hourly Profile, 2016-2017") +
xlab("Hour of Day") +
ylab("Percent of Daily Homicides")
shootings.homicides %>%
mutate(wkend = ifelse(wday(crime.datetime) %in% c(0,6), "Weekend", "Weekday")) %>%
filter(year(crime.datetime) %in% c(2016, 2017),
description == "HOMICIDE") %>%
group_by(wkend, hr) %>%
summarise(n.hour = n()) %>%
mutate(pct.hour = n.hour / sum(n.hour)) %>%
ungroup() %>%
ggplot(aes(x = hr, y = pct.hour)) +
geom_line(aes(color = wkend)) +
theme_minimal() +
scale_y_continuous(labels = scales::percent) +
ggtitle("Weekday and Weekend Homicide Hourly Profile, 2016-2017") +
xlab("Hour of Day") +
ylab("Percent of Daily Homicides")
library(shiny)
library(tidyverse)
library(RSocrata)
#library(rwunderground)
library(lubridate)
library(broom)
library(ggiteam)
library(plotly)
n.lags <- 15
weekly.df <- readRDS("cache.Rdata") %>%
mutate(pred = NA_real_)
#predict.week.start <- floor_date(today() - dweeks(1), "week")
#train.start.week.start <- predict.week.start - dweeks(1)
apply_lags <- function(df, n.lags){
lags <- seq(n.lags)
lag_names <- paste("lag",
formatC(lags, width = nchar(max(lags)), flag = "0"),                      sep = "_")
lag_functions <- setNames(paste("dplyr::lag(., ", lags, ")"), lag_names)
df <- dplyr::mutate_at(df, vars(all.shootings), funs_(lag_functions))
return(df)
}
build_training_data <- function(predict.week.start){
training.df <- weekly.df %>%
apply_lags(n.lags) %>%
dplyr::filter(week.start < as.Date(predict.week.start)) %>%
#week.start >= (predict.week.start - lubridate::dweeks(53))) %>%
dplyr::select(all.shootings,
mean.max.temp,
days.precip,
starts_with("lag")) %>%
na.omit()
return(training.df)
}
fit_weekly_model <- function(training.df){
mod <- glm(all.shootings ~ .,
data = training.df,
family = "poisson")
return(mod)
}
predict_weekly_crime <- function(model, predict.week.start){
new <- weekly.df %>%
apply_lags(n.lags) %>%
filter(week.start == predict.week.start) %>%
select(-all.shootings)
prediction <- predict.glm(model, new, type = "response")
return(prediction)
}
actual_n_shootings <- function(predict.week.start){
actual.n.shootings <- weekly.df %>%
filter(week.start == predict.week.start) %>%
select(all.shootings) %>%
pull()
return(actual.n.shootings)
}
# generate models/predictions for last 100 weeks
for(i in seq(nrow(weekly.df) - 100, nrow(weekly.df), 1)){
predict.week.start <- weekly.df$week.start[[i]]
train.df <- build_training_data(predict.week.start)
mod <- fit_weekly_model(train.df)
weekly.df$pred[[i]] <- predict_weekly_crime(mod, predict.week.start)
}
plot_time_series <- function(){
g <- weekly.df %>%
filter(!is.na(pred)) %>%
ggplot(aes(week.start)) +
geom_line(aes(y = all.shootings), color = "red") +
geom_line(aes(y = pred), color = "black") +
theme_iteam_google_docs() +
ylab("Total Weekly Shootings (Non-Fatal + Hom.)") +
xlab("Week Starting")
print(ggplotly(g))
}
plot_ts_diff_bar <- function(){
g <- weekly.df %>%
filter(!is.na(pred)) %>%
mutate(perf = all.shootings - pred) %>%
ggplot(aes(week.start, perf)) +
geom_col()+
theme_iteam_google_docs() +
ylab("Actual Over/Under Prediction") +
xlab("Week Starting")
ggplotly(g)
}
# weekl
g <- weekly.df %>%
filter(!is.na(pred)) %>%
mutate(perf = all.shootings - pred) %>%
ggplot(aes(week.start, perf)) +
geom_col()+
theme_iteam_google_docs() +
ylab("Actual Over/Under Prediction") +
xlab("Week Starting")
ggplotly(g)
g <- weekly.df %>%
filter(!is.na(pred)) %>%
mutate(perf = all.shootings - pred) %>%
ggplot(aes(week.start, perf)) +
geom_col()+
theme_iteam_google_docs() +
ylab("Actual Over/Under Prediction") +
xlab("Week Starting")
library(shiny)
library(tidyverse)
library(RSocrata)
#library(rwunderground)
library(lubridate)
library(broom)
library(ggiteam)
library(plotly)
n.lags <- 15
weekly.df <- readRDS("cache.Rdata") %>%
mutate(pred = NA_real_)
#predict.week.start <- floor_date(today() - dweeks(1), "week")
#train.start.week.start <- predict.week.start - dweeks(1)
apply_lags <- function(df, n.lags){
lags <- seq(n.lags)
lag_names <- paste("lag",
formatC(lags, width = nchar(max(lags)), flag = "0"),                      sep = "_")
lag_functions <- setNames(paste("dplyr::lag(., ", lags, ")"), lag_names)
df <- dplyr::mutate_at(df, vars(all.shootings), funs_(lag_functions))
return(df)
}
build_training_data <- function(predict.week.start){
training.df <- weekly.df %>%
apply_lags(n.lags) %>%
dplyr::filter(week.start < as.Date(predict.week.start)) %>%
#week.start >= (predict.week.start - lubridate::dweeks(53))) %>%
dplyr::select(all.shootings,
mean.max.temp,
days.precip,
starts_with("lag")) %>%
na.omit()
return(training.df)
}
fit_weekly_model <- function(training.df){
mod <- glm(all.shootings ~ .,
data = training.df,
family = "poisson")
return(mod)
}
predict_weekly_crime <- function(model, predict.week.start){
new <- weekly.df %>%
apply_lags(n.lags) %>%
filter(week.start == predict.week.start) %>%
select(-all.shootings)
prediction <- predict.glm(model, new, type = "response")
return(prediction)
}
actual_n_shootings <- function(predict.week.start){
actual.n.shootings <- weekly.df %>%
filter(week.start == predict.week.start) %>%
select(all.shootings) %>%
pull()
return(actual.n.shootings)
}
# generate models/predictions for last 100 weeks
for(i in seq(nrow(weekly.df) - 100, nrow(weekly.df), 1)){
predict.week.start <- weekly.df$week.start[[i]]
train.df <- build_training_data(predict.week.start)
mod <- fit_weekly_model(train.df)
weekly.df$pred[[i]] <- predict_weekly_crime(mod, predict.week.start)
}
plot_time_series <- function(){
g <- weekly.df %>%
filter(!is.na(pred)) %>%
ggplot(aes(week.start)) +
geom_line(aes(y = all.shootings), color = "red") +
geom_line(aes(y = pred), color = "black") +
theme_iteam_google_docs() +
ylab("Total Weekly Shootings (Non-Fatal + Hom.)") +
xlab("Week Starting")
print(ggplotly(g))
}
plot_ts_diff_bar <- function(){
g <- weekly.df %>%
filter(!is.na(pred)) %>%
mutate(perf = all.shootings - pred) %>%
ggplot(aes(week.start, perf)) +
geom_col()+
theme_iteam_google_docs() +
ylab("Actual Over/Under Prediction") +
xlab("Week Starting")
ggplotly(g)
}
# weekly.df %>%
#   filter(!is.na(pred)) %>%
library(shiny)
library(tidyverse)
library(RSocrata)
#library(rwunderground)
library(lubridate)
library(broom)
library(ggiteam)
library(plotly)
n.lags <- 15
weekly.df <- readRDS("cache.Rdata") %>%
mutate(pred = NA_real_)
setwd("~/Code/data_analysis/bmore_shootings_weather")
n.lags <- 15
weekly.df <- readRDS("cache.Rdata") %>%
mutate(pred = NA_real_)
#predict.week.start <- floor_date(today() - dweeks(1), "week")
#train.start.week.start <- predict.week.start - dweeks(1)
apply_lags <- function(df, n.lags){
lags <- seq(n.lags)
lag_names <- paste("lag",
formatC(lags, width = nchar(max(lags)), flag = "0"),                      sep = "_")
lag_functions <- setNames(paste("dplyr::lag(., ", lags, ")"), lag_names)
df <- dplyr::mutate_at(df, vars(all.shootings), funs_(lag_functions))
return(df)
}
build_training_data <- function(predict.week.start){
training.df <- weekly.df %>%
apply_lags(n.lags) %>%
dplyr::filter(week.start < as.Date(predict.week.start)) %>%
#week.start >= (predict.week.start - lubridate::dweeks(53))) %>%
dplyr::select(all.shootings,
mean.max.temp,
days.precip,
starts_with("lag")) %>%
na.omit()
return(training.df)
}
fit_weekly_model <- function(training.df){
mod <- glm(all.shootings ~ .,
data = training.df,
family = "poisson")
return(mod)
}
predict_weekly_crime <- function(model, predict.week.start){
new <- weekly.df %>%
apply_lags(n.lags) %>%
filter(week.start == predict.week.start) %>%
select(-all.shootings)
prediction <- predict.glm(model, new, type = "response")
return(prediction)
}
actual_n_shootings <- function(predict.week.start){
actual.n.shootings <- weekly.df %>%
filter(week.start == predict.week.start) %>%
select(all.shootings) %>%
pull()
return(actual.n.shootings)
}
# generate models/predictions for last 100 weeks
for(i in seq(nrow(weekly.df) - 100, nrow(weekly.df), 1)){
predict.week.start <- weekly.df$week.start[[i]]
train.df <- build_training_data(predict.week.start)
mod <- fit_weekly_model(train.df)
weekly.df$pred[[i]] <- predict_weekly_crime(mod, predict.week.start)
}
plot_time_series <- function(){
g <- weekly.df %>%
filter(!is.na(pred)) %>%
ggplot(aes(week.start)) +
geom_line(aes(y = all.shootings), color = "red") +
geom_line(aes(y = pred), color = "black") +
theme_iteam_google_docs() +
ylab("Total Weekly Shootings (Non-Fatal + Hom.)") +
xlab("Week Starting")
print(ggplotly(g))
}
plot_ts_diff_bar <- function(){
g <- weekly.df %>%
filter(!is.na(pred)) %>%
mutate(perf = all.shootings - pred) %>%
ggplot(aes(week.start, perf)) +
geom_col()+
theme_iteam_google_docs() +
ylab("Actual Over/Under Prediction") +
xlab("Week Starting")
ggplotly(g)
}
# weekly.df %>%
#   filter(!is.na(pred)) %>%
#   ggplot(aes(week.start)) +
g <- weekly.df %>%
filter(!is.na(pred)) %>%
mutate(perf = all.shootings - pred) %>%
ggplot(aes(week.start, perf)) +
geom_col()+
theme_iteam_google_docs() +
ylab("Actual Over/Under Prediction") +
xlab("Week Starting")
ggplotly(g)
weekly.df %>%
filter(!is.na(pred)) %>%
mutate(perf = all.shootings - pred) %>%
ggplot(aes(week.start, perf)) +
geom_col()+
theme_iteam_google_docs() +
ylab("Actual Over/Under Prediction") +
xlab("Week Starting")
weekly.df %>%
filter(!is.na(pred)) %>%
mutate(perf = all.shootings - pred) %>%
ggplot(aes(week.start, perf)) +
geom_col(aes(fill = perf < 0))+
theme_iteam_google_docs() +
ylab("Actual Over/Under Prediction") +
xlab("Week Starting")
weekly.df %>%
filter(!is.na(pred)) %>%
mutate(perf = all.shootings - pred) %>%
ggplot(aes(week.start, perf)) +
geom_col(aes(fill = perf < 0))+
theme_iteam_google_docs() +
theme(legend.position = "none") +
ylab("Actual Over/Under Prediction") +
xlab("Week Starting")
runApp()
weekly.df %>%
filter(!is.na(pred)) %>%
mutate(perf = all.shootings - pred) %>%
ggplot(aes(week.start, perf)) +
geom_col(aes(fill = perf < 0))+
theme_iteam_presentations() +
theme(legend.position = "none") +
ylab("Actual Over/Under Prediction") +
xlab("Week Starting")
g <- weekly.df %>%
filter(!is.na(pred)) %>%
mutate(perf = all.shootings - pred) %>%
ggplot(aes(week.start, perf)) +
geom_col(aes(fill = perf < 0))+
theme_iteam_presentations() +
theme(legend.position = "none") +
ylab("Actual Over/Under Prediction") +
xlab("Week Starting")
print(g)
runApp()
runApp()
library(devtools)
devtools::install_github("hadley/ggplot2")
library(shiny)
library(tidyverse)
library(RSocrata)
#library(rwunderground)
library(lubridate)
library(broom)
library(ggiteam)
library(plotly)
runApp()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
